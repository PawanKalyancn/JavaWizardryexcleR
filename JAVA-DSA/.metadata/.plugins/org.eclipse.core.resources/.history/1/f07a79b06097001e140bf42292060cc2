package com.canlender.service;


	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;

import com.canlender.entity.TimesheetEntry;
import com.canlender.repository.TimesheetEntryRepository;

import jakarta.transaction.Transactional;

import java.util.List;

	@Service
	public class TimeSheetServiceImpl implements TimeSheetService {

	    @Autowired
	    private TimesheetEntryRepository timeSheetRepository;

		@Override
		public List<TimesheetEntry> getAllTimeSheetEntries() {

	        return timeSheetRepository.findAll();
		}

		@Override
		public TimesheetEntry saveTimeSheetEntry(TimesheetEntry timeSheetEntry) {
			// TODO Auto-generated method stub
	        return timeSheetRepository.save(timeSheetEntry);
		}

		


		@Override
		public void deleteTimeSheetEntry(Long id) {
			// TODO Auto-generated method stub
	        timeSheetRepository.deleteById(id);
		}

		@Override
		public TimesheetEntry updateTimeSheetEntryStatus(Long id, String status, String reason) {
			// TODO Auto-generated method stub
			return null;
		}

		

		

	    @Override
	    @Transactional
	    public void updateStatusAndReason(Long id, String newStatus, String rejectionReason) {
	        TimesheetEntry timesheetEntry = timeSheetRepository.findById(id).orElse(null);
	        if (timesheetEntry != null) {
	            timesheetEntry.updateStatusAndReason(newStatus, rejectionReason);
	        }
	    }
		
	    @Override
	    public void updateTimesheetEntry(Long id, TimesheetEntry updatedEntry) {
	        timeSheetRepository.findById(id).ifPresent(existingEntry -> {
	            // Update the fields of the existing entry with the new values
	            // (you may want to add validation logic and handle null values appropriately)
	            existingEntry.setEmployeeId(updatedEntry.getEmployeeId());
	            existingEntry.setProject(updatedEntry.getProject());
	            existingEntry.setStatus(updatedEntry.getStatus());
	            existingEntry.setTotal(updatedEntry.getTotal());
	            existingEntry.setReason(updatedEntry.getReason());
	            existingEntry.setWeekStartDate(updatedEntry.getWeekStartDate());
	            existingEntry.setWeekEndDate(updatedEntry.getWeekEndDate());
	            existingEntry.setDates(updatedEntry.getDates());
	            existingEntry.setHours(updatedEntry.getHours());

	            // Save the updated entry back to the database
	            timeSheetRepository.save(existingEntry);
	        });
	    }


		
		
	@Override
    @Transactional
    public void updateStatusAndReasonAndBulk(List<Long> ids, String newStatus, String rejectionReason) {
        List<TimesheetEntry> timesheetEntries = timeSheetRepository.findAllById(ids);
        for (TimesheetEntry entry : timesheetEntries) {
            entry.updateStatusAndReason(newStatus, rejectionReason);
        }

        // Save the updated entries back to the database
        timeSheetRepository.saveAll(timesheetEntries);
    }	
		
		
	}
		
	/*	@Override
	    @Transactional
	    public List<TimesheetEntry> updateEntriesStatus(List<TimesheetEntry> requests) {
			 List<TimesheetEntry> updatedEntries = new ArrayList<>();

		        for (TimesheetEntry request : requests) {
		            Optional<TimesheetEntry> optionalEntry = timeSheetRepository.findById(request.getId());
		            
		            if (optionalEntry.isPresent()) {
		                TimesheetEntry entry = optionalEntry.get();
		                entry.setStatus(request.getStatus());
		                entry.setReason(request.getReason());

		                // Perform any additional logic if needed

		                updatedEntries.add(timeSheetRepository.save(entry));
		            }
		        }

		        return updatedEntries;
		    }	*/
		
	
		
	
		
	